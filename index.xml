<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academy of Bored Ones</title>
    <link>https://calcraft.org/</link>
    <description>Recent content on Academy of Bored Ones</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</copyright>
    <lastBuildDate>Sat, 05 Jun 2021 22:05:00 +0000</lastBuildDate>
    
        <atom:link href="https://calcraft.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>光线追踪：初步</title>
        <link>https://calcraft.org/post/cn_2021-06-06-raytracing-101/</link>
        <pubDate>Sat, 05 Jun 2021 22:05:00 +0000</pubDate>
        
        <guid>https://calcraft.org/post/cn_2021-06-06-raytracing-101/</guid>
        <description>Academy of Bored Ones https://calcraft.org/post/cn_2021-06-06-raytracing-101/ -&lt;h2 id=&#34;1-引言&#34;&gt;1. 引言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文需要一些关于向量、线性代数和微积分学的知识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时至今日，计算机图形学 (Computer Graphics, CG) 已经进入了生活的方方面面。这里不探讨 CG 技术对生活带来的影响，仅从它的基础出发，用 &lt;code&gt;Python&lt;/code&gt; （你没看错，我没用  &lt;code&gt;C++&lt;/code&gt;）来进行图形学的简要探讨。&lt;/p&gt;
&lt;p&gt;本文所要实现的目标，是极为简单的一个模型：一个&lt;strong&gt;点光源&lt;/strong&gt;位于&lt;strong&gt;平面&lt;/strong&gt;的正上方，求它发出的光（不考虑衰减——这涉及到光传播中的&lt;strong&gt;平方反比定律&lt;/strong&gt;）在该平面上各点的光强。&lt;/p&gt;
&lt;p&gt;这里请注意：上文所提到的平面平行于电脑屏幕。这样，在这篇文章中，我们就可以减少坐标变换与映射的出现，也更好让初次接触 CG 的读者快速理解。（你肯定不想一上来就算一堆矩阵是吧？）&lt;/p&gt;
&lt;p&gt;本文是系列文章的第一篇。作者本人也在同步学习，当学习进度足以撰写下一篇时，就将撰写。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本文中所有渲染示意图均用 Blender 制作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-图形学-hello-world光&#34;&gt;2. 图形学 Hello World：光&lt;/h2&gt;
&lt;p&gt;这个又臭又长的小标题很好地说明了我们将要处理什么，以及它在整个图形学学习中的地位。先来介绍一些概念。&lt;/p&gt;
&lt;h3 id=&#34;21-光的反射&#34;&gt;2.1. 光的反射&lt;/h3&gt;
&lt;center&gt;
  &lt;pr&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/06/07/2dEoAP.png&#34; alt=&#34;2dEoAP.png&#34; border=&#34;0&#34; style=&#34;zoom: 50%&#34; /&gt;&lt;/a&gt;  &lt;/center&gt;
&lt;center&gt; &lt;b&gt;图 1&lt;/b&gt;：光线的反射 &lt;/center&gt;
&lt;p&gt;&lt;strong&gt;定义 1.&lt;/strong&gt;	如&lt;strong&gt;图 1&lt;/strong&gt;，$A$ 是任何一段光滑曲线。则，过 $A$ 上一点作它的切线 $t$ (tangent)，再过交点 $N$ 作 $t$ 的垂线 $n$，我们把直线 $n$ 叫做曲线 $A$ 在点 $N$ 处的&lt;strong&gt;法线&lt;/strong&gt; (normal)。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;再次看&lt;strong&gt;图 1&lt;/strong&gt;。这一次我们注意打在曲线 $A$ 上的那条线。如果这里把它看作光线，并把曲线 $A$ 看作镜面，那么它叫做&lt;strong&gt;入射光&lt;/strong&gt; (incident ray)。自然，有入射光必定有&lt;strong&gt;反射光&lt;/strong&gt; (reflected ray)，它和入射光关于法线 $n$ 轴对称。图中的角 $\theta$ 叫做&lt;strong&gt;入射角&lt;/strong&gt; (incident angle)，由上文我们可知&lt;strong&gt;反射角&lt;/strong&gt; (reflected ray) 在数值上等于入射角。&lt;/p&gt;
&lt;p&gt;你可能已经感到疑惑：凭这些角，如何来刻画这束光照亮物体的程度呢？先暂时不看这幅图，接下来，我将一一介绍，光究竟如何照亮屏幕中的世界。&lt;/p&gt;
&lt;h4 id=&#34;211-夹角与明暗&#34;&gt;2.1.1. 夹角与明暗&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;— “夹角”和“明暗”有半毛钱关系？&lt;/p&gt;
&lt;p&gt;— 还真有。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里重申一下引言里的条件：不考虑光的衰减。现在，如果让你来刻画光线和平面夹角和平面上光所射中这一点的光照强度之间的关系，你将如何进行？请先思考，然后点击下面的折叠内容。&lt;/p&gt;
&lt;details&gt; &lt;summary&gt;一种解答&lt;/summary&gt; &lt;pre&gt;
生活经验告诉我们，光在&lt;b&gt;垂直照射&lt;/b&gt;某一样东西的时候，它将最亮。
（请不要想象手电筒或探照灯的光束——我们只是在谈论一丝光线，它没有体积。）
如果光线与物体的夹角是0度，则物体将不被照亮。
从&lt;b&gt;0度到90度&lt;/b&gt;，从&lt;b&gt;漆黑到明亮&lt;/b&gt;。你想到了哪个&lt;b&gt;三角函数&lt;/b&gt;？
正是&lt;b&gt;余弦函数&lt;/b&gt;。因此，计算出光和平面的夹角余弦，便可以知道该点的明暗。
&lt;/pre&gt; &lt;/details&gt;
&lt;h3 id=&#34;22-向量光线与平面&#34;&gt;2.2. 向量、光线与平面&lt;/h3&gt;
&lt;p&gt;让我们顺着&lt;strong&gt;2.1.1&lt;/strong&gt;中的思路，继续探究这个问题。&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://z3.ax1x.com/2021/06/06/2dEgpD.png&#34; alt=&#34;2dEgpD.png&#34; border=&#34;0&#34; style=&#34;zoom: 50%&#34; /&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;center&gt; &lt;b&gt;图 2&lt;/b&gt;：点光源与平面 &lt;/center&gt;
&lt;p&gt;如图，在空间中，我们可以把从点光源 $L$ 发出的光线看作向量，并将它们反向，平移到光线与平面的接触点处，再计算平面上这一点的垂线所在的向量（我们把它叫做&lt;strong&gt;法向量&lt;/strong&gt;）与这束光的夹角的余弦。&lt;/p&gt;
&lt;p&gt;你也许会注意到“接触点”一词。不过，这里完全可以选定一个点来计算，因为向量平移后仍等于原向量，这就是我们可以把所有向量平移到坐标原点简化运算的基础。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么不计算光线与平面的夹角？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为它们都是向量，所以可以考虑向量&lt;strong&gt;点积&lt;/strong&gt; (dot product)。一般来说，
$$
\mathbf{a}\cdot\mathbf{b}=|\mathbf{a}||\mathbf{b}|\cos\langle\mathbf{a}, \mathbf{b}\rangle
$$
这给了我们启示：两个向量之间的夹角，可以用它们的点积进行表达。但是，又如何获取点积的值呢？下面就引入用坐标表示点积的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理.&lt;/strong&gt;	设 $\mathbf{a}=(x_1, y_1, z_1)$，$\mathbf{b}=(x_2, y_2, z_2)$，则它们的点积 $\mathbf{a}\cdot\mathbf{b}$：
$$
\mathbf{a}\cdot\mathbf{b}=x_1x_2+y_1y_2+z_1z_2
$$
这样，便可以由光线的坐标，得出光线和平面法向量之间的夹角的余弦值了。&lt;/p&gt;
&lt;p&gt;此时会出现一个问题：从点光源 $L$ 发出的光线是无穷多的。如果要每一束光线都涉及到，那么积分就必不可少。&lt;/p&gt;
&lt;p&gt;但是，现在如果想象一张格点纸，如果只考虑击中在格点上的光线，而且只看纸上的格点（也就是说平面不无限大），那就可以用简单的离散运算来取得每一个选定点上的光强。&lt;/p&gt;
&lt;h4 id=&#34;221-计算数据&#34;&gt;2.2.1 计算数据&lt;/h4&gt;
&lt;p&gt;按上文所述的方法，我们便可以计算了。&lt;/p&gt;
&lt;p&gt;在计算时要注意：光线向量是&lt;strong&gt;可以变动&lt;/strong&gt;的，因为有无数条从无数个方向打到平面上的光，而平面（在我们的视角）只有一个法向量，因此需要把光线向量的坐标设为变量。&lt;/p&gt;
&lt;p&gt;其次，就是炼丹学家喜闻乐见的&lt;strong&gt;归一化&lt;/strong&gt; (normalization)。这意味着要把所有向量转化为单位向量。实际上这很好办，直接用向量除以自己的&lt;strong&gt;模&lt;/strong&gt; (magnitude) 就行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义 2&lt;/strong&gt;.	向量 $\mathbf{v}$ 的模为根号下每个方向的坐标的平方之和，记作 $|\mathbf{v}|$。&lt;/p&gt;
&lt;p&gt;然后再用光线向量和法向量的单位向量来计算夹角余弦：
$$
\cos \theta = \frac{\frac{\mathbf{v_l}}{|\mathbf{v_l}|}\cdot\frac{\mathbf{n}}{|\mathbf{n}|}}{|\frac{\mathbf{v_l}}{|\mathbf{v_l}|}||\frac{\mathbf{n}}{|\mathbf{n}|}|}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读&lt;/strong&gt;	归一化的方法很多，包括但不限于 Sigmoid，softmax 等。但此处，直接把每个数据除以该组数据中的最大值即可。&lt;/p&gt;
&lt;h2 id=&#34;3-得到结果&#34;&gt;3. 得到结果&lt;/h2&gt;
&lt;h3 id=&#34;31-准备&#34;&gt;3.1. 准备&lt;/h3&gt;
&lt;p&gt;理论上，像上面这样就可以了。但即使平面、采样点有限，挨个挨个手算也太复杂了。我们需要利用 &lt;code&gt;Python&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph LR;
A(设定平面和点光源位置) ---|归一化| B[计算点积];
B --&amp;gt; C[映射到光强];
C --&amp;gt; D[按行列输出到终端];
D --&amp;gt; E(结束)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就需要向量来进行计算。由于 &lt;code&gt;Python&lt;/code&gt; 不自带向量，我们必须写一个向量库。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|- venv
|  |- bin
|  |- lib
|  |  include
|  |  pyvenv.cfg
|
|  Float.py
|  Vector.py
|  main.py
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;
  &lt;b&gt;树状图1&lt;/b&gt;：典型结构
&lt;/center&gt;
&lt;p&gt;其中，&lt;code&gt;Float.py&lt;/code&gt; 和 &lt;code&gt;Vector.py&lt;/code&gt; 都是所需的库，而 &lt;code&gt;main.py&lt;/code&gt; 实现了流程图中的过程。&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://z3.ax1x.com/2021/06/07/2dY1xA.png&#34; alt=&#34;2dY1xA.png&#34; border=&#34;0&#34; style=&#34;zoom: 50%&#34;/&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;这是一个二维浮点数组类。它的 &lt;code&gt;magnitude()&lt;/code&gt; 方法代表这个数组的模，因此可以用类似的思路，写一个三维浮点类，并用三维向量类来继承。这样，可以大大减少冗余代码量。&lt;/p&gt;
&lt;p&gt;略去中间步骤，我们最终可以得到：&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://z3.ax1x.com/2021/06/07/2dYbdK.png&#34; alt=&#34;2dYbdK.png&#34; border=&#34;0&#34; style=&#34;zoom: 50%&#34; /&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;不要乍一看被吓到了。实际上，真正起效的，只有 &lt;code&gt;__mul__()&lt;/code&gt; 和 &lt;code&gt;ang()&lt;/code&gt; 方法。前者是 &lt;code&gt;Python&lt;/code&gt; 的魔术方法 (magic methods) 之一，允许用算符对两个对象进行运算操作。此处，&amp;ldquo;mul&amp;rdquo; 就是 multiply 的意思，方法内部重写的代码规定了两个向量如何相乘。&lt;/p&gt;
&lt;p&gt;第 &lt;code&gt;22&lt;/code&gt; 行，就是在 &lt;strong&gt;2.2&lt;/strong&gt; 中提到过的夹角公式。同样，这个类也有 &lt;code&gt;normalized()&lt;/code&gt; 方法来进行归一化处理。&lt;/p&gt;
&lt;h3 id=&#34;32-计算&#34;&gt;3.2. 计算&lt;/h3&gt;
&lt;center&gt;
  &lt;img src=&#34;https://z3.ax1x.com/2021/06/07/2dN3HP.png&#34; alt=&#34;2dN3HP.png&#34; border=&#34;0&#34; style=&#34;zoom: 50%&#34;/&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;这就是我们代码的核心，它通过计算夹角并一一映射到坐标点，提供了每个点的光强信息。&lt;/p&gt;
&lt;p&gt;注意其中第二行的注释——实际上并不需要定义光线向量，因为以击中点为参考系时，它是可变的。我们可以直接在循环体内进行定义。&lt;/p&gt;
&lt;p&gt;除此之外，9-12行的判断结构是为了把角度限制在0-90度内。但是，同样可以采用绝对值，这样会比判断快得多。&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://z3.ax1x.com/2021/06/07/2dNgCF.png&#34; alt=&#34;2dNgCF.png&#34; border=&#34;0&#34; style=&#34;zoom: 50%&#34;/&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;最后是 &lt;code&gt;Parse&lt;/code&gt; 函数。它分为两部分，第一部分是把光强和字符映射，第二部分是将数据表示为可视化方阵。这样，&lt;code&gt;Python&lt;/code&gt; 就实现了模拟光在平面上的照射情况。&lt;/p&gt;
&lt;h3 id=&#34;33-示例&#34;&gt;3.3 示例&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;平面法向量 $(0, 0, 1)$， 点光源位置 $(0,0,0.1)$，大小 $35\times35$。&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://z3.ax1x.com/2021/06/07/2dNoE6.png&#34; alt=&#34;2dNoE6.png&#34; border=&#34;0&#34; style=&#34;zoom: 75%&#34;/&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平面法向量 $(3, 0, 1)$，其他条件不变。&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://z3.ax1x.com/2021/06/07/2dNjKA.png&#34; alt=&#34;2dNjKA.png&#34; border=&#34;0&#34; style=&#34;zoom: 75%&#34;/&gt;&lt;/a&gt;
&lt;/center&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h2&gt;
&lt;p&gt;本文在图形学的基础上，使用 &lt;code&gt;Python&lt;/code&gt; 对光线在平面上的光强进行了离散、简单的模拟。&lt;/p&gt;
&lt;p&gt;下一篇文章将涉及到三维视图映射（相机视角）、曲面光强、光线衰减和漫反射，实际上是对此处介绍的 Lambert 光照模型的补全。以后还将介绍 Phong 光照模型和渲染方程，以及 BRDF 和 BSDF（双向反射、散射分布函数）。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;
- https://calcraft.org/post/cn_2021-06-06-raytracing-101/ - 2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</description>
        </item>
    
    
    
        <item>
        <title>不等式及杂项</title>
        <link>https://calcraft.org/post/cn_2021-04-24-math-neq/</link>
        <pubDate>Sat, 24 Apr 2021 21:37:00 +0000</pubDate>
        
        <guid>https://calcraft.org/post/cn_2021-04-24-math-neq/</guid>
        <description>Academy of Bored Ones https://calcraft.org/post/cn_2021-04-24-math-neq/ -&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章将介绍一些著名的不等式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1-均值不等式&#34;&gt;1. 均值不等式&lt;/h4&gt;
&lt;p&gt;这个著名的不等式极有可能是你在中学时代第一次接触的那一个。我们已经对它的二元形式很熟悉了：
$$
\sqrt{ab}\leq\frac{a+b}{2}
$$
然而，均值不等式还有多元形式。
$$
\sqrt[n]{\prod_{i=1}^nx_i}\leq\frac{\sum_{i=1}^n}{n}
$$
例如，
$$
\sqrt[5]{abcde}\leq\frac{a+b+c+d+e}{5}
$$&lt;/p&gt;
&lt;h4 id=&#34;2-琴生-jensen-不等式&#34;&gt;2. 琴生 (Jensen) 不等式&lt;/h4&gt;
&lt;p&gt;另一个著名的不等式。它的一个特例是
$$
\frac{f(x_1)+f(x_2)}{2}\leq f\left(\frac{x_1+x_2}{2}\right).
$$
你是否发现这个不等式很好地描述了上凸函数的性质？琴生不等式就是干这活的。
$$
\frac{\sum_{i=1}^nf(x_i)}{n}\leq f\left(\frac{\sum_{i=1}^nx_i}{n}\right)
$$
其中 $f(x)$ 是在区间上的上凸函数。当 $x_1=x_2=\cdots=x_i$ 时， $“=”$ 成立。&lt;/p&gt;
&lt;h5 id=&#34;21-加权琴生不等式&#34;&gt;2.1 加权琴生不等式&lt;/h5&gt;
&lt;p&gt;如同我们耳熟能详的加权平均数，加权琴生不等式可以这样表示：
$$
w_i\cdot \sum_{i=1}^nf(x_i)\leq f\left(\sum_{i=1}^nw_ix_i\right),\sum_{i=1}^nw_i=1
$$
容易发现，加权琴生不等式实际上就是在每一项之前乘上了权重 $w_i$。值得注意的是，这里并没有除以项数 $n$。&lt;/p&gt;
&lt;h4 id=&#34;3-赫尔德-hölder-不等式&#34;&gt;3. 赫尔德 (Hölder) 不等式&lt;/h4&gt;
&lt;p&gt;赫尔德不等式被戏称为大柯西不等式。先来看看它究竟长啥样。
$$
\sum_{i=1}^na_ib_i\leq \left(\sum_{i=1}^na_i^p\right)^{\frac{1}{p}}\left(\sum_{i=1}^nb_i^q\right)^{\frac{1}{q}},p&amp;gt;1,\frac{1}{p}+\frac{1}{q}=1,\forall a_i,b_i\in\left(\R\cap[0,+\infty)\right)
$$
再来看看它的积分形式。
$$
\int_\Omega f(x)g(x)\mathrm{d}x\leq\left(\int_\Omega |f(x)|^p\mathrm{d}x\right)^{\frac{1}{p}}\left(\int_\Omega |g(x)|^q\mathrm{d}x\right)^{\frac{1}{q}}
$$
看起来不太友好，对吧？&lt;/p&gt;
&lt;p&gt;（未完待续）&lt;/p&gt;
- https://calcraft.org/post/cn_2021-04-24-math-neq/ - 2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</description>
        </item>
    
    
    
        <item>
        <title>如何在 Jupyter 中使用 Wolfram Engine</title>
        <link>https://calcraft.org/post/cn_2021-02-26-wolfram-with-jekyll/</link>
        <pubDate>Fri, 26 Feb 2021 20:44:31 +0000</pubDate>
        
        <guid>https://calcraft.org/post/cn_2021-02-26-wolfram-with-jekyll/</guid>
        <description>Academy of Bored Ones https://calcraft.org/post/cn_2021-02-26-wolfram-with-jekyll/ -&lt;ul&gt;
&lt;li&gt;预计阅读时间：&lt;strong&gt;10分钟&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 
src=&#34;//music.163.com/outchain/player?type=2&amp;id=574928897&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;我发现我已经十天没更新这玩意了……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此教程将介绍一种在 Jupyter 中使用 Wolfram Engine 的方法，以便获得更高的数据处理效率。&lt;/p&gt;
&lt;h3 id=&#34;安装-wolfram-engine&#34;&gt;安装 Wolfram Engine&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;你可以在&lt;a href=&#34;https://www.wolfram.com/engine/&#34;&gt;这里&lt;/a&gt;免费下载 Wolfram Engine。实际上它也能在附带的 WolframScript 中运行，不过我们的目标是将它植入为 Jupyter 的一个内核。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找一个教程，它应该会让你下载一个&lt;code&gt;.paclet&lt;/code&gt;文件来向 Wolfram Engine 添加支持 Jupyter 的特性。我无法提供这个文件，因为我忘了具体过程。你只要上网搜索 &amp;ldquo;Wolfram Engine + Jupyter&amp;rdquo; 就能看到许多完整教程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 Jupyter Lab 或 Jupyter Notebook。你现在应该能选择 &amp;ldquo;Wolfram Language&amp;rdquo; 内核了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;联合-wolfram-语言和-python&#34;&gt;联合 Wolfram 语言和 Python&lt;/h3&gt;
&lt;p&gt;举个例子。&lt;/p&gt;
&lt;p&gt;Python 部分：（如果你使用 Anaconda 安装 Jupyter，所使用的包应该会自动安装）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In[]:
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sympy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sp

defsym &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; sym: sp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Symbol(sym)
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; defsym(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;)
testset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([i&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)])
f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

reslist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; testset:
  reslist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;integrate(f, (x, num, num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(reslist)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把 &lt;code&gt;reslist&lt;/code&gt; 复制进另一个有 Wolfram 内核的 Notebook：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-mathematica&#34; data-lang=&#34;mathematica&#34;&gt;testlist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {reslist} &lt;span style=&#34;color:#75715e&#34;&gt;(*We must ignore the []s here *)&lt;/span&gt;
ListLinePlot[testlist]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们会得到一个显示了积分结果的图。这比 &lt;code&gt;matplotlib&lt;/code&gt; 包不知道快到哪里去了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FlifeX&lt;/em&gt;&lt;/p&gt;
- https://calcraft.org/post/cn_2021-02-26-wolfram-with-jekyll/ - 2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</description>
        </item>
    
    
    
        <item>
        <title>Calcraft 的起源 (第一节)</title>
        <link>https://calcraft.org/post/cn_2021-02-15-calcraft-tale-part-1/</link>
        <pubDate>Mon, 15 Feb 2021 21:35:00 +0000</pubDate>
        
        <guid>https://calcraft.org/post/cn_2021-02-15-calcraft-tale-part-1/</guid>
        <description>Academy of Bored Ones https://calcraft.org/post/cn_2021-02-15-calcraft-tale-part-1/ -&lt;h3 id=&#34;calcraft-的起源&#34;&gt;Calcraft 的起源&lt;/h3&gt;
&lt;p&gt;什么是 Calcraft？它是个合成词 （&lt;strong&gt;Cal&lt;/strong&gt;culator + Mine&lt;strong&gt;craft&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;2019 年 2 月&lt;/strong&gt;, Gary（MMXXXVIII）和 FlifeX 开始在 Minecraft 里造计算器。最开始他们并没把这东西的难度当回事，但这个困难的任务从未被完成过。出人意料，这最终成为了 Calcraft 的起源 —— Syndicate 有史以来最伟大的游戏服务器。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;FlifeX&lt;/strong&gt;：我的傻逼文笔不适合写这东西，以后看&lt;a href=&#34;https://shimo.im/docs/hYpxvWJDkYtYHy9d/&#34;&gt;这里&lt;/a&gt;吧。&lt;/p&gt;
- https://calcraft.org/post/cn_2021-02-15-calcraft-tale-part-1/ - 2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</description>
        </item>
    
    
    
        <item>
        <title>PowerPy 开发日志</title>
        <link>https://calcraft.org/post/cn_2021-02-15-powerpy-development/</link>
        <pubDate>Mon, 15 Feb 2021 19:49:00 +0000</pubDate>
        
        <guid>https://calcraft.org/post/cn_2021-02-15-powerpy-development/</guid>
        <description>Academy of Bored Ones https://calcraft.org/post/cn_2021-02-15-powerpy-development/ -&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PowerPy&lt;/strong&gt; 是一个用 Python 写的 Shell，致力于达到与&lt;code&gt;bash&lt;/code&gt;，&lt;code&gt;zsh&lt;/code&gt;等 Linux Shell 相似的功能。&lt;/p&gt;
&lt;p&gt;目前，PowerPy 有一个不完整的账户管理系统，它的提示符甚至还在用 &lt;code&gt;eval&lt;/code&gt; 函数。&lt;/p&gt;
&lt;h3 id=&#34;典型函数&#34;&gt;典型函数&lt;/h3&gt;
&lt;p&gt;PowerPy 的开发过程中，我也遇到过许多恶心的问题。下面是一些典型的函数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;(self, username):
    PROMPT_PREFIX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; username &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; $ &amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        issue_command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os.system(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; input(PROMPT_PREFIX)
        eval(issue_command)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是的，你也许会认为：“就这？”，然而对我来说并不那么容易，因为我不知道如何用 Python 正确执行 Shell 命令。最后，我还是不得不用 Python 的 &lt;code&gt;eval()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
- https://calcraft.org/post/cn_2021-02-15-powerpy-development/ - 2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</description>
        </item>
    
    
    
        <item>
        <title>如何在 Blender 2.9 中用 MantaFlow 模拟烟雾</title>
        <link>https://calcraft.org/post/cn_2021-02-14-blender-smoke-simulation/</link>
        <pubDate>Sun, 14 Feb 2021 12:34:56 +0000</pubDate>
        
        <guid>https://calcraft.org/post/cn_2021-02-14-blender-smoke-simulation/</guid>
        <description>Academy of Bored Ones https://calcraft.org/post/cn_2021-02-14-blender-smoke-simulation/ -&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=1354201856&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://ftp.bmp.ovh/imgs/2021/02/14828e06d0c47839.png&#34; alt=&#34;final&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;示例最终效果&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;你需要安装 &lt;strong&gt;Blender&lt;/strong&gt; (在此教程中，我的版本是 &lt;strong&gt;2.91.0&lt;/strong&gt;)，如果你曾经使用过 Blender 就更好了。&lt;/p&gt;
&lt;h3 id=&#34;烟雾&#34;&gt;烟雾&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建一个默认的立方体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后，对方块应用&lt;strong&gt;物体 - 快速效果 - 快速烟雾&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一切顺利，你会看见一个由线框组成的立方体 (&lt;strong&gt;Smoke Domain&lt;/strong&gt;，烟雾域)，里面有另一个比较小的立方体。仔细观察，我们会发现另一个小正方体连在烟雾域的一个角上，其代表&lt;strong&gt;将要被烘培的烟雾的分辨率&lt;/strong&gt;（我们之后解释）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;烟雾域&lt;/strong&gt;的&lt;em&gt;物理属性&lt;/em&gt;选项卡里调整烟雾。这里，我提供一组推荐的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;细分精度：&lt;strong&gt;越高越好，这取决于你电脑的性能。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常来说，300 到 500 就够了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用场景重力： &lt;em&gt;&lt;strong&gt;Z&lt;/strong&gt;&lt;/em&gt; 方向 = &lt;em&gt;&lt;strong&gt;g&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启用&lt;strong&gt;自适配域&lt;/strong&gt;（这可以减少烘培时间）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启用&lt;strong&gt;消融&lt;/strong&gt;，&lt;strong&gt;时间&lt;/strong&gt;设置为 30，并且启用&lt;strong&gt;减慢&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启用&lt;strong&gt;噪波&lt;/strong&gt;，把 &lt;strong&gt;Upres 系数&lt;/strong&gt; 设置为 2，&lt;strong&gt;强度/力度&lt;/strong&gt; 设置为 0.75，&lt;strong&gt;缩放&lt;/strong&gt; 设置为 2，并且把&lt;strong&gt;时间&lt;/strong&gt;设置为 0.1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;strong&gt;火焰&lt;/strong&gt;：把&lt;strong&gt;反应速度&lt;/strong&gt;设置为 0.75，&lt;strong&gt;涡量&lt;/strong&gt;设置为1，&lt;strong&gt;最高温度&lt;/strong&gt;设置为 4.5，&lt;strong&gt;最小值&lt;/strong&gt;设置为 1.5。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，如果你做正确了，点击&lt;strong&gt;烘培&lt;/strong&gt;， 然后慢慢等吧！不久，你的屏幕上就会出现一团十分真实的烟雾。（提示：你可以把 Blender 窗口分为三个区域 —— 一个用作渲染视图，一个用作&lt;strong&gt;着色器编辑器&lt;/strong&gt;，另一个用作&lt;strong&gt;时间线&lt;/strong&gt;，并且你总是可以用&lt;strong&gt;相机视角&lt;/strong&gt;！）&lt;/p&gt;
&lt;h3 id=&#34;着色器&#34;&gt;着色器&lt;/h3&gt;
&lt;p&gt;在时间线里面选一帧好看的（每次烘培结果都不一样，因为这是一个混沌系统）。现在就是这个教程最激动人心的部分！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击烟雾域，在着色器编辑器里创建这些东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;火焰&lt;/strong&gt;：属性  (&lt;strong&gt;flame&lt;/strong&gt;).系数 - 运算 (&lt;strong&gt;正片叠底(相乘 A*B)&lt;/strong&gt;) (另一个参数 &lt;strong&gt;150-250&lt;/strong&gt;) - 强度/力度.自发光 (&lt;strong&gt;颜色 H: 0.082, S: 0.700, V: 1.000&lt;/strong&gt;) - 相加着色器 (标记为 &lt;strong&gt;AS1&lt;/strong&gt;) - 材质输出 (体积 (音量))。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;（烟雾）密度&lt;/strong&gt;：属性 (&lt;strong&gt;density&lt;/strong&gt;).系数 - 颜色渐变 (&lt;strong&gt;DensityRamp&lt;/strong&gt;) - 运算 (&lt;strong&gt;相加&lt;/strong&gt;) (另一个参数 &lt;strong&gt;100&lt;/strong&gt;) - 密度.原理化体积 (&lt;strong&gt;Smoke Principled Volume&lt;/strong&gt;) - &lt;strong&gt;AS1&lt;/strong&gt; - 材质输出 (体积 (音量))。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;颜色&lt;/strong&gt;：马氏分形纹理 (- 矢量运算 (&lt;strong&gt;[EXP] Add Textures&lt;/strong&gt;)) - 系数.颜色渐变 - 颜色.&lt;strong&gt;Smoke Principled Volume&lt;/strong&gt; - &lt;strong&gt;AS1&lt;/strong&gt; - 材质输出 (体积 (音量))。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ftp.bmp.ovh/imgs/2021/02/655511c6d054d11c.png&#34; alt=&#34;node&#34;&gt;
&lt;em&gt;示例节点配置&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提示：如果你不知道怎么办，就按图示设置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;渲染&#34;&gt;渲染&lt;/h3&gt;
&lt;p&gt;这是这个教程的最终部分。点击&lt;em&gt;渲染属性&lt;/em&gt;选项卡，然后把&lt;strong&gt;渲染引擎&lt;/strong&gt;换成 &lt;em&gt;Cycles&lt;/em&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用&lt;strong&gt;自适应采样&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;启用&lt;strong&gt;降噪&lt;/strong&gt;。使用 &lt;strong&gt;NLM&lt;/strong&gt; 渲染，并且把&lt;strong&gt;起始采样&lt;/strong&gt;设置为 3。&lt;/li&gt;
&lt;li&gt;如果你使用 &lt;strong&gt;CPU&lt;/strong&gt; 渲染，把&lt;strong&gt;拼贴大小&lt;/strong&gt;设置为 &lt;strong&gt;16 * 16&lt;/strong&gt;。如果你使用 &lt;strong&gt;GPU&lt;/strong&gt;，把&lt;strong&gt;拼贴大小&lt;/strong&gt;设置为 &lt;strong&gt;256 * 256&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;现在就可以了！按下 &lt;strong&gt;F12&lt;/strong&gt; ，获得你自己的烟雾模拟图片吧！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一组可选设置。它们应该在渲染前完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;em&gt;输出属性&lt;/em&gt;选项卡，把&lt;strong&gt;分辨率&lt;/strong&gt;设置成显示器的分辨率（或者其他什么）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把&lt;strong&gt;文件格式&lt;/strong&gt;设置成高质量的，比如 PNG。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;附录&#34;&gt;附录&lt;/h3&gt;
&lt;p&gt;如果你不想自己做，我也提供一份 &lt;a href=&#34;129.211.80.104/smoke.blend&#34;&gt;.blend 文件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;玩的开心！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FlifeX, MMXXXVIII&lt;/em&gt;&lt;/p&gt;
- https://calcraft.org/post/cn_2021-02-14-blender-smoke-simulation/ - 2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</description>
        </item>
    
    
    
        <item>
        <title>Tesseract 想法 (2021)</title>
        <link>https://calcraft.org/post/cn_2021-02-14-tesseract-ideas/</link>
        <pubDate>Sun, 14 Feb 2021 01:48:00 +0000</pubDate>
        
        <guid>https://calcraft.org/post/cn_2021-02-14-tesseract-ideas/</guid>
        <description>Academy of Bored Ones https://calcraft.org/post/cn_2021-02-14-tesseract-ideas/ -&lt;h3 id=&#34;tesseract-长期计划&#34;&gt;Tesseract 长期计划&lt;/h3&gt;
&lt;p&gt;最近更新：&lt;strong&gt;2021/02/14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人不应止步于眼前的世界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tesseract 是一个致力于拥有&lt;strong&gt;世界上最安全的聊天环境&lt;/strong&gt;的聊天软件。&lt;/p&gt;
&lt;p&gt;目前，我拟定了如下目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;完全的 P2P 多人对话；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加密系统；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GUI（由于技术原因，我们决定使用 &lt;a href=&#34;https://github.com/spectresystems/spectre.console&#34;&gt;Spectre.Console&lt;/a&gt;）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账户系统；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以及许多未提到的功能！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为这东西实在是太累人了，我真的需要帮忙。如果你有意帮助我们，你可以联系我们并加入我们的 &lt;a href=&#34;https://trello.com/b/GIljVysf/tesseract&#34;&gt;Trello 主页&lt;/a&gt;，&lt;a href=&#34;https://github.com/flifez/Tesseract&#34;&gt;GitHub 仓库&lt;/a&gt;，和 &lt;u&gt;Discord 服务器&lt;/u&gt;。&lt;/p&gt;
- https://calcraft.org/post/cn_2021-02-14-tesseract-ideas/ - 2021 AcBO / FlifeX. 本站遵循 CC BY-NC-SA 4.0 协议.</description>
        </item>
    
    
    
    
    
    
  </channel>
</rss> 